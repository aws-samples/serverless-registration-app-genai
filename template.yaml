AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Registration App using GenAI

Parameters:
  AuthName:
    Type: String
    Default: registration-app
    Description: Unique Auth Name for Cognito Resources

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: python3.11
    Tracing: Active
    Architectures:
      - x86_64
  Api:
    TracingEnabled: true
    Cors:
      AllowMethods: "'OPTIONS, POST, GET'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'" # DO NOT USE THIS VALUE IN PRODUCTION - https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html

Resources:

  # TODO Remove layer for Bedrock GA
  BedrockLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: bedrock-layer
      Description: Bedrock Lambda Layer
      ContentUri: s3://mrkrchm-bedrock/boto3-for-bedrock-47597af9-9989-49b2-9576-7d452e1442cd.zip
      CompatibleRuntimes:
        - python3.11

  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      CodeUri: backend/src/handlers/register
      Description: Register function
      Events:
        RegisterPath:
          Type: Api
          Properties:
            Path: /register
            Method: POST
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: RegistrationService
          POWERTOOLS_METRICS_NAMESPACE: RegistrationApp
          POWERTOOLS_DEV: false # set to false in production
          LOG_LEVEL: INFO
          TOPIC_ARN: !Ref RegistrationTopic
          TABLE_NAME: !Ref RegistrationTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RegistrationTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt RegistrationTopic.TopicName
        - Statement:
          - Sid: BedrockInvokeModelPolicy
            Effect: Allow
            Action:
            - bedrock:InvokeModel
            Resource: !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/amazon.titan-tg1-large
      Layers:
        - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV2:42
        - !Ref BedrockLayer # TODO Remove layer for Bedrock GA
      Tags:
        LambdaPowertools: python

  WebSiteBucket:
    Type: AWS::S3::Bucket

  WebSiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebSiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForCloudFrontPrivateContent
        Statement:
        - Sid: AllowCloudFrontServicePrincipal
          Effect: Allow
          Principal:
            Service: cloudfront.amazonaws.com
          Action: s3:GetObject
          # Resource: !Join ['', ['arn:aws:s3:::', !Ref WebSiteBucket, /*]]
          Resource: !Sub 'arn:aws:s3:::${WebSiteBucket}/*' 
          Condition:
            StringEquals:
              # AWS:SourceArn: !Join ['', ['arn:aws:cloudfront::', !Ref "AWS::AccountId",
              #     ':distribution/', !Ref CloudFrontDistribution]]
              AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub '${AWS::StackName}'
        Origins:
        - DomainName: !GetAtt WebSiteBucket.RegionalDomainName
          Id: myS3Origin
          OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
          S3OriginConfig:
            OriginAccessIdentity: ''
        Enabled: true
        DefaultRootObject: index.html
        HttpVersion: http2
        DefaultCacheBehavior:
          AllowedMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          CachedMethods:
          - GET
          - HEAD
          TargetOriginId: myS3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https # allow-all
          MinTTL: 0
          DefaultTTL: 3600
          MaxTTL: 86400
        PriceClass: PriceClass_200
        Restrictions:
          GeoRestriction:
            RestrictionType: whitelist
            Locations:
            - US
            - CA
            - GB
            - DE
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${WebSiteBucket} OAC"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Sub 'ApplicationInsights-SAM-${AWS::StackName}'
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName: !Ref 'ApplicationResourceGroup'
      AutoConfigurationEnabled: 'true'

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${AuthName}-userpool'
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: 'OFF'
      Schema:
        - Name: given_name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: family_name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${AuthName}-client'
      GenerateSecret: false
      UserPoolId: !Ref 'UserPool'

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub '${AuthName}-identitypool'
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref 'UserPoolClient'
          ProviderName: !GetAtt 'UserPool.ProviderName'

  CognitoUnAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref 'IdentityPool'
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
      Policies:
        - PolicyName: CognitoUnauthorizedPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                Resource: '*'

  CognitoAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref 'IdentityPool'
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: CognitoAuthorizedPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                  - cognito-identity:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'

  IdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref 'IdentityPool'
      Roles:
        authenticated: !GetAtt 'CognitoAuthorizedRole.Arn'
        unauthenticated: !GetAtt 'CognitoUnAuthorizedRole.Arn'

  RegistrationTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub 'Registration-${AWS::StackName}'
      PrimaryKey:
        Name: email
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  RegistrationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'RegistrationTopic-${AWS::StackName}'

      
Outputs:
  APIGatewayEndpoint:
    Description: API Gateway endpoint URL for Prod environment for Register Function
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
  CloudFrontDistributionId:
    Description: CloudFront Distribution ID for hosting web front end
    Value: !Ref CloudFrontDistribution
  CloudFrontDistributionDomainName:
    Description: CloudFront Distribution Domain Name for accessing web front end
    Value: !GetAtt CloudFrontDistribution.DomainName
  IdentityPoolId:
    Description: Cognito Identity Pool ID 
    Value: !Ref 'IdentityPool'
  Region:
    Description: AWS Region
    Value: !Sub '${AWS::Region}'
  RegisterFunction:
    Description: Lambda Function ARN
    Value: !GetAtt 'RegisterFunction.Arn'
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref 'UserPool'
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref 'UserPoolClient'
  WebS3BucketName:
    Description: S3 Bucket for hosting web frontend
    Value: !Ref WebSiteBucket
